{"ast":null,"code":"var _jsxFileName = \"/Users/yeqinghan/mp22/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { getAllPokemon, getPokemon } from \"./Services/pokemon\";\nimport Card from \"./Components/Card\";\n\nfunction App() {\n  //data get from pokemon api,initial state pass an array\n  const [pokemonData, setPokemonData] = useState([]); //store the url of next page\n\n  const [nextpageUrl, setNextPageurl] = useState('');\n  const [prevpageUrl, setPrevPageurl] = useState(''); //set data state when use api\n\n  const [loading, setLoading] = useState(true); // string\n\n  const currentUrl = 'https://pokeapi.co/api/v2/pokemon'; //one function, one array\n\n  useEffect(() => {\n    async function fetchData() {\n      let response = await getAllPokemon(currentUrl);\n      console.log(response); //response is the data get from api, it has previous and next to the other page\n\n      setNextPageurl(response.next);\n      setPrevPageurl(response.previous); //passing the results array\n\n      let pokemon = await loadingPokemon(response.results); //get data back from Api\n\n      setLoading(false);\n    } //recreate the function\n\n\n    fetchData();\n  }, []);\n\n  const loadingPokemon = async data => {\n    //local pokemon array take in an array of promises return an array after all promises resolve\n    let _pokemonData = await Promise.all(data.map(async pokemon => {\n      let pokemonRecord = await getPokemon(pokemon.url);\n      return pokemonRecord;\n    })); //store data into react state\n\n\n    setPokemonData(_pokemonData);\n  };\n\n  return (//render to the screen\n    React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, loading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"...loading...\") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, pokemonData.map((pokemon, i) => {\n      return React.createElement(Card, {\n        key: i,\n        pokemon: pokemon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      });\n    }))))\n  );\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/yeqinghan/mp22/src/App.js"],"names":["React","useEffect","useState","getAllPokemon","getPokemon","Card","App","pokemonData","setPokemonData","nextpageUrl","setNextPageurl","prevpageUrl","setPrevPageurl","loading","setLoading","currentUrl","fetchData","response","console","log","next","previous","pokemon","loadingPokemon","results","data","_pokemonData","Promise","all","map","pokemonRecord","url","i"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;AAEA,OAAO,WAAP;AACA,SAAQC,aAAR,EAAuBC,UAAvB,QAAwC,oBAAxC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;AAEA,SAASC,GAAT,GAAe;AACb;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C,CAFa,CAGb;;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C,CALa,CAMb;;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC,CAPa,CAQb;;AACA,QAAMa,UAAU,GAAG,mCAAnB,CATa,CAWb;;AACAd,EAAAA,SAAS,CAAC,MAAK;AACb,mBAAee,SAAf,GAA0B;AACxB,UAAIC,QAAQ,GAAG,MAAMd,aAAa,CAACY,UAAD,CAAlC;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ,EAFwB,CAGxB;;AACAP,MAAAA,cAAc,CAACO,QAAQ,CAACG,IAAV,CAAd;AACAR,MAAAA,cAAc,CAACK,QAAQ,CAACI,QAAV,CAAd,CALwB,CAMxB;;AACA,UAAIC,OAAO,GAAG,MAAMC,cAAc,CAACN,QAAQ,CAACO,OAAV,CAAlC,CAPwB,CAQxB;;AACAV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAXY,CAYb;;;AACAE,IAAAA,SAAS;AAEV,GAfQ,EAeP,EAfO,CAAT;;AAiBA,QAAMO,cAAc,GAAG,MAAOE,IAAP,IAAgB;AACrC;AACA,QAAIC,YAAY,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,GAAL,CAAS,MAAMP,OAAN,IAAiB;AAC7D,UAAIQ,aAAa,GAAG,MAAM1B,UAAU,CAACkB,OAAO,CAACS,GAAT,CAApC;AACA,aAAOD,aAAP;AACD,KAHoC,CAAZ,CAAzB,CAFqC,CAMrC;;;AACAtB,IAAAA,cAAc,CAACkB,YAAD,CAAd;AACD,GARD;;AAUA,SACI;AACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGb,OAAO,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAH,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGN,WAAW,CAACsB,GAAZ,CAAgB,CAACP,OAAD,EAAUU,CAAV,KAAgB;AAC/B,aAAO,oBAAC,IAAD;AAAM,QAAA,GAAG,EAAGA,CAAZ;AAAe,QAAA,OAAO,EAAIV,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFA,CADH,CADF,CAFN;AAFF;AAeD;;AAED,eAAehB,GAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {getAllPokemon, getPokemon} from \"./Services/pokemon\";\nimport Card from \"./Components/Card\"\n\nfunction App() {\n  //data get from pokemon api,initial state pass an array\n  const [pokemonData, setPokemonData] = useState([]);\n  //store the url of next page\n  const [nextpageUrl, setNextPageurl] = useState('');\n  const [prevpageUrl, setPrevPageurl] = useState('');\n  //set data state when use api\n  const [loading, setLoading] = useState(true);\n  // string\n  const currentUrl = 'https://pokeapi.co/api/v2/pokemon'\n\n  //one function, one array\n  useEffect(() =>{\n    async function fetchData(){\n      let response = await getAllPokemon(currentUrl);\n      console.log(response)\n      //response is the data get from api, it has previous and next to the other page\n      setNextPageurl(response.next);\n      setPrevPageurl(response.previous);\n      //passing the results array\n      let pokemon = await loadingPokemon(response.results);\n      //get data back from Api\n      setLoading(false);\n    }\n    //recreate the function\n    fetchData();\n\n  },[]);\n\n  const loadingPokemon = async (data) => {\n    //local pokemon array take in an array of promises return an array after all promises resolve\n    let _pokemonData = await Promise.all(data.map(async pokemon => {\n      let pokemonRecord = await getPokemon(pokemon.url);\n      return pokemonRecord\n    }))\n    //store data into react state\n    setPokemonData(_pokemonData)\n  }\n\n  return (\n      //render to the screen\n    <div>\n      {loading ? <h1>...loading...</h1>:(\n          <div>\n            <div className=\"card-grid-container\">\n              {pokemonData.map((pokemon, i) => {\n                return <Card key ={i} pokemon = {pokemon}/>\n              })\n              }\n            </div>\n          </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}