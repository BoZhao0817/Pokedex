{"ast":null,"code":"var _jsxFileName = \"/Users/yeqinghan/mp22/src/Components/Layout/Dashboard.js\";\nimport React, { Component, useEffect, useState } from 'react';\nimport SearchBar from '../search/SearchBar';\nimport Card from \"./Components/Card\";\nimport Nav from \"./Components/Nav/\";\nimport bg from \"../../bg.png\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Pokedex from \"../Card/Pokedex\";\nimport { getAllPokemon, getPokemon } from \"../../Services/pokemon\";\nexport default class Dashboard extends Component {\n  render() {\n    //data get from pokemon api,initial state pass an array\n    const [pokemonData, setPokemonData] = this.useState([]); //store the url of next page\n\n    const [nextpageUrl, setNextPageurl] = useState('');\n    const [prevpageUrl, setPrevPageurl] = useState(''); //set data state when use api\n\n    const [loading, setLoading] = useState(true); // string\n\n    const currentUrl = 'https://pokeapi.co/api/v2/pokemon'; //one function, one array\n\n    useEffect(() => {\n      async function fetchData() {\n        let response = await getAllPokemon(currentUrl);\n        console.log(response); //response is the data get from api, it has previous and next to the other page\n\n        setNextPageurl(response.next);\n        setPrevPageurl(response.previous); //passing the results array\n\n        let pokemon = await loadingPokemon(response.results); //get data back from Api\n\n        setLoading(false);\n      } //recreate the function\n\n\n      fetchData();\n    }, []);\n\n    const next = async () => {\n      setLoading(true);\n      let data = await getAllPokemon(nextpageUrl);\n      await loadingPokemon(data.results);\n      setNextPageurl(data.next);\n      setPrevPageurl(data.previous);\n      setLoading(false);\n    };\n\n    const prev = async () => {\n      if (!prevpageUrl) return;\n      setLoading(true);\n      let data = await getAllPokemon(prevpageUrl);\n      await loadingPokemon(data.results);\n      setNextPageurl(data.next);\n      setPrevPageurl(data.previous);\n      setLoading(false);\n    };\n\n    const loadingPokemon = async data => {\n      //local pokemon array take in an array of promises return an array after all promises resolve\n      let _pokemonData = await Promise.all(data.map(async pokemon => {\n        let pokemonRecord = await getPokemon(pokemon.url);\n        return pokemonRecord;\n      })); //store data into react state\n\n\n      setPokemonData(_pokemonData);\n    };\n\n    return React.createElement(\"div\", {\n      className: \"card-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, pokemonData.map((pokemon, i) => {\n      return React.createElement(Card, {\n        key: i,\n        pokemon: pokemon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      });\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/yeqinghan/mp22/src/Components/Layout/Dashboard.js"],"names":["React","Component","useEffect","useState","SearchBar","Card","Nav","bg","HashRouter","Router","Route","Switch","Pokedex","getAllPokemon","getPokemon","Dashboard","render","pokemonData","setPokemonData","nextpageUrl","setNextPageurl","prevpageUrl","setPrevPageurl","loading","setLoading","currentUrl","fetchData","response","console","log","next","previous","pokemon","loadingPokemon","results","data","prev","_pokemonData","Promise","all","map","pokemonRecord","url","i"],"mappings":"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","sourcesContent":["import React, {Component, useEffect, useState} from 'react';\nimport SearchBar from '../search/SearchBar';\nimport Card from \"./Components/Card\"\nimport Nav from \"./Components/Nav/\";\nimport bg from \"../../bg.png\";\nimport {HashRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Pokedex from \"../Card/Pokedex\";\nimport {getAllPokemon, getPokemon} from \"../../Services/pokemon\";\n\n\nexport default class Dashboard extends Component {\n    render() {\n        //data get from pokemon api,initial state pass an array\n        const [pokemonData, setPokemonData] = this.useState([]);\n        //store the url of next page\n        const [nextpageUrl, setNextPageurl] = useState('');\n        const [prevpageUrl, setPrevPageurl] = useState('');\n        //set data state when use api\n        const [loading, setLoading] = useState(true);\n        // string\n        const currentUrl = 'https://pokeapi.co/api/v2/pokemon'\n\n        //one function, one array\n        useEffect(() =>{\n            async function fetchData(){\n                let response = await getAllPokemon(currentUrl);\n                console.log(response)\n                //response is the data get from api, it has previous and next to the other page\n                setNextPageurl(response.next);\n                setPrevPageurl(response.previous);\n                //passing the results array\n                let pokemon = await loadingPokemon(response.results);\n                //get data back from Api\n                setLoading(false);\n            }\n            //recreate the function\n            fetchData();\n\n        },[]);\n\n        const next = async () => {\n            setLoading(true);\n            let data = await getAllPokemon(nextpageUrl);\n            await loadingPokemon(data.results);\n            setNextPageurl(data.next);\n            setPrevPageurl(data.previous);\n            setLoading(false);\n        }\n\n        const prev = async () => {\n            if (!prevpageUrl) return;\n            setLoading(true);\n            let data = await getAllPokemon(prevpageUrl);\n            await loadingPokemon(data.results);\n            setNextPageurl(data.next);\n            setPrevPageurl(data.previous);\n            setLoading(false);\n        }\n\n\n        const loadingPokemon = async (data) => {\n            //local pokemon array take in an array of promises return an array after all promises resolve\n            let _pokemonData = await Promise.all(data.map(async pokemon => {\n                let pokemonRecord = await getPokemon(pokemon.url);\n                return pokemonRecord\n            }))\n            //store data into react state\n            setPokemonData(_pokemonData)\n        }\n        return (\n                <div className=\"card-grid-container\">\n                    {pokemonData.map((pokemon, i) => {\n                        return <Card key ={i} pokemon = {pokemon}/>\n                    })\n                    }\n                </div>\n\n\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}