{"ast":null,"code":"var _jsxFileName = \"/Users/yeqinghan/mp22/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { getAllPokemon, getPokemon } from \"./Services/pokemon\";\nimport Card from \"./Components/Card\";\nimport Nav from \"./Components/Nav/Nav\";\nimport bg from \"./bg.png\";\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Pokedex from \"./Components/Card/Pokedex\";\n\nfunction App() {\n  //data get from pokemon api,initial state pass an array\n  const [pokemonData, setPokemonData] = useState([]); //store the url of next page\n\n  const [nextpageUrl, setNextPageurl] = useState('');\n  const [prevpageUrl, setPrevPageurl] = useState(''); //set data state when use api\n\n  const [loading, setLoading] = useState(true); // string\n\n  const currentUrl = 'https://pokeapi.co/api/v2/pokemon'; //one function, one array\n\n  useEffect(() => {\n    async function fetchData() {\n      let response = await getAllPokemon(currentUrl);\n      console.log(response); //response is the data get from api, it has previous and next to the other page\n\n      setNextPageurl(response.next);\n      setPrevPageurl(response.previous); //passing the results array\n\n      let pokemon = await loadingPokemon(response.results); //get data back from Api\n\n      setLoading(false);\n    } //recreate the function\n\n\n    fetchData();\n  }, []);\n\n  const next = async () => {\n    setLoading(true);\n    let data = await getAllPokemon(nextpageUrl);\n    await loadingPokemon(data.results);\n    setNextPageurl(data.next);\n    setPrevPageurl(data.previous);\n    setLoading(false);\n  };\n\n  const prev = async () => {\n    if (!prevpageUrl) return;\n    setLoading(true);\n    let data = await getAllPokemon(prevpageUrl);\n    await loadingPokemon(data.results);\n    setNextPageurl(data.next);\n    setPrevPageurl(data.previous);\n    setLoading(false);\n  };\n\n  const loadingPokemon = async data => {\n    //local pokemon array take in an array of promises return an array after all promises resolve\n    let _pokemonData = await Promise.all(data.map(async pokemon => {\n      let pokemonRecord = await getPokemon(pokemon.url);\n      return pokemonRecord;\n    })); //store data into react state\n\n\n    setPokemonData(_pokemonData);\n  };\n\n  return (//render to the screen\n    React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, loading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"...loading...\") : React.createElement(\"div\", {\n      style: {\n        background: `url(${bg})`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: prev,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Prev\"), React.createElement(\"button\", {\n      onClick: next,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Next\")), React.createElement(\"div\", {\n      className: \"card-grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/pokemon/:pokemonIndex\",\n      component: Pokedex,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })), pokemonData.map((pokemon, i) => {\n      return React.createElement(Card, {\n        key: i,\n        pokemon: pokemon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      });\n    })), React.createElement(\"div\", {\n      className: \"btn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: prev,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Prev\"), React.createElement(\"button\", {\n      onClick: next,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Next\")))))\n  );\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/yeqinghan/mp22/src/App.js"],"names":["React","useEffect","useState","getAllPokemon","getPokemon","Card","Nav","bg","HashRouter","Router","Route","Switch","Pokedex","App","pokemonData","setPokemonData","nextpageUrl","setNextPageurl","prevpageUrl","setPrevPageurl","loading","setLoading","currentUrl","fetchData","response","console","log","next","previous","pokemon","loadingPokemon","results","data","prev","_pokemonData","Promise","all","map","pokemonRecord","url","background","i"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {getAllPokemon, getPokemon} from \"./Services/pokemon\";\nimport Card from \"./Components/Card\"\nimport Nav from \"./Components/Nav/Nav\";\nimport bg from \"./bg.png\";\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\nimport Pokedex from \"./Components/Card/Pokedex\";\n\nfunction App() {\n  //data get from pokemon api,initial state pass an array\n  const [pokemonData, setPokemonData] = useState([]);\n  //store the url of next page\n  const [nextpageUrl, setNextPageurl] = useState('');\n  const [prevpageUrl, setPrevPageurl] = useState('');\n  //set data state when use api\n  const [loading, setLoading] = useState(true);\n  // string\n  const currentUrl = 'https://pokeapi.co/api/v2/pokemon'\n\n  //one function, one array\n  useEffect(() =>{\n    async function fetchData(){\n      let response = await getAllPokemon(currentUrl);\n      console.log(response)\n      //response is the data get from api, it has previous and next to the other page\n      setNextPageurl(response.next);\n      setPrevPageurl(response.previous);\n      //passing the results array\n      let pokemon = await loadingPokemon(response.results);\n      //get data back from Api\n      setLoading(false);\n    }\n    //recreate the function\n    fetchData();\n\n  },[]);\n\n  const next = async () => {\n    setLoading(true);\n    let data = await getAllPokemon(nextpageUrl);\n    await loadingPokemon(data.results);\n    setNextPageurl(data.next);\n    setPrevPageurl(data.previous);\n    setLoading(false);\n  }\n\n  const prev = async () => {\n    if (!prevpageUrl) return;\n    setLoading(true);\n    let data = await getAllPokemon(prevpageUrl);\n    await loadingPokemon(data.results);\n    setNextPageurl(data.next);\n    setPrevPageurl(data.previous);\n    setLoading(false);\n  }\n\n\n  const loadingPokemon = async (data) => {\n    //local pokemon array take in an array of promises return an array after all promises resolve\n    let _pokemonData = await Promise.all(data.map(async pokemon => {\n      let pokemonRecord = await getPokemon(pokemon.url);\n      return pokemonRecord\n    }))\n    //store data into react state\n    setPokemonData(_pokemonData)\n  }\n\n  return (\n      //render to the screen\n      <Router>\n        <div>\n          {loading ? <h1>...loading...</h1>:(\n              <div style={{background:`url(${bg})`}}>\n                <Nav/>\n                <div className=\"btn\">\n                  <button onClick={prev}>Prev</button>\n                  <button onClick={next}>Next</button>\n                </div>\n                <div className=\"card-grid-container\">\n                  <Switch>\n                    {/*<Route exact path=\"/\" component = {Card}/>*/}\n                    <Route exact path=\"/pokemon/:pokemonIndex\" component = {Pokedex}/>\n                  </Switch>\n                  {pokemonData.map((pokemon, i) => {\n                    return <Card key ={i} pokemon = {pokemon}/>\n                  })\n                  }\n                </div>\n                <div className=\"btn\">\n                  <button onClick={prev}>Prev</button>\n                  <button onClick={next}>Next</button>\n                </div>\n              </div>\n          )}\n        </div>\n      </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}